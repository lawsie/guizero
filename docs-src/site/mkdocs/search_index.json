{
    "docs": [
        {
            "location": "/about/",
            "text": "About\n\n\nWhat is guizero?\n\n\n\n\nIt is a Python 3 library for creating simple GUIs\n\n\nIt is a wrapper for the standard Tkinter library (included by default when Python is installed)\n\n\n\n\nAims\n\n\nThe aim of guizero is to make the process of creating simple GUIs quick, accessible and understandable for children.\n\n\n\n\nWorks with standard Python Tkinter GUI library (and no need to install other libraries)\n\n\nAbstracts away details children find difficult to understand (such as Tkinter StringVar() objects)\n\n\nAccessible widget naming system to help children to build up a mental model\n\n\nFlexible enough to be used for projects up to A-Level standard, yet accessible to primary school children\n\n\nComprehensive and accessible documentation with examples\n\n\nGenerates helpful additional error messages\n\n\n\n\nVersion\n\n\nguizero is currently version 0.2.0\n\n\nThis is a pre-release version, so there may be bugs and features may change.",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/about/#what-is-guizero",
            "text": "It is a Python 3 library for creating simple GUIs  It is a wrapper for the standard Tkinter library (included by default when Python is installed)",
            "title": "What is guizero?"
        },
        {
            "location": "/about/#aims",
            "text": "The aim of guizero is to make the process of creating simple GUIs quick, accessible and understandable for children.   Works with standard Python Tkinter GUI library (and no need to install other libraries)  Abstracts away details children find difficult to understand (such as Tkinter StringVar() objects)  Accessible widget naming system to help children to build up a mental model  Flexible enough to be used for projects up to A-Level standard, yet accessible to primary school children  Comprehensive and accessible documentation with examples  Generates helpful additional error messages",
            "title": "Aims"
        },
        {
            "location": "/about/#version",
            "text": "guizero is currently version 0.2.0  This is a pre-release version, so there may be bugs and features may change.",
            "title": "Version"
        },
        {
            "location": "/",
            "text": "Installation\n\n\nguizero is designed to allow children to quickly and easily create GUIs for their programs.\n\n\nIn educational settings (schools, libraries etc.), installation of extra programs and features may be difficult, so the setup process is designed to be as simple as possible. guizero only requires \ntkinter\n to be installed, and this is already bundled with most Python installations.\n\n\nThe aim is for installation and getting started to be as simple as possible.\n\n\nOn Windows\n\n\nThe easiest way to install guizero is to use \npip\n (follow \nthis simple guide\n to using pip).\n\n\nType the following at a command prompt:\n\n\npip install guizero\n\n\n\n\nOn Raspberry Pi\n\n\nMake sure your Raspberry Pi is connected to the internet, then open a terminal window and type the following:\n\n\nsudo pip3 install guizero",
            "title": "Installation"
        },
        {
            "location": "/#installation",
            "text": "guizero is designed to allow children to quickly and easily create GUIs for their programs.  In educational settings (schools, libraries etc.), installation of extra programs and features may be difficult, so the setup process is designed to be as simple as possible. guizero only requires  tkinter  to be installed, and this is already bundled with most Python installations.  The aim is for installation and getting started to be as simple as possible.",
            "title": "Installation"
        },
        {
            "location": "/#on-windows",
            "text": "The easiest way to install guizero is to use  pip  (follow  this simple guide  to using pip).  Type the following at a command prompt:  pip install guizero",
            "title": "On Windows"
        },
        {
            "location": "/#on-raspberry-pi",
            "text": "Make sure your Raspberry Pi is connected to the internet, then open a terminal window and type the following:  sudo pip3 install guizero",
            "title": "On Raspberry Pi"
        },
        {
            "location": "/howto/",
            "text": "How to...\n\n\nThis section aims to explain features that are common to all classes of guizero.\n\n\nSpecifying parameters\n\n\nWhen first creating an object, you can specify parameters (the properties you want the object to have) in two possible ways:\n\n\nOption 1 - in order\n\n\nSpecify the parameters in the \nexact\n order given in the table on the documentation page. You do not have to specify all of the optional parameters, but you must specify them in order and not miss any out.\n\n\nFor example if the parameters available were \na, b, c, d, e\n\n\n\n\nSpecifying \na, b, c\n is valid\n\n\nSpecifying \na, b, d, e\n is not valid as you have missed out c but still specified later parameters\n\n\n\n\nHere is an example of code with parameters specified in this way\n\n\napp = App(\"Title of my app\")\ninput_box = TextBox(app, \"Type here\")\n\n\n\n\nThis way will probably be most useful for younger children where programs are not likely to need complex configuration options.\n\n\nOption 2 - as keyword arguments\n\n\nCompulsory parameters should always be specified in the exact order given in the documentation, for example the \nmaster\n parameter is a compulsory first parameter for all widgets.\n\n\nIf you only want to specify some of the \noptional\n parameters, you can specify them after the compulsory parameters in any order, using the format \nparameter=value\n.\n\n\nIn this example the compulsory parameter \napp\n has been specified first, followed by the optional \nwidth\n parameter.\n\n\napp = App()\ninput_box = TextBox(app, width=20)",
            "title": "How to..."
        },
        {
            "location": "/howto/#how-to",
            "text": "This section aims to explain features that are common to all classes of guizero.",
            "title": "How to..."
        },
        {
            "location": "/howto/#specifying-parameters",
            "text": "When first creating an object, you can specify parameters (the properties you want the object to have) in two possible ways:",
            "title": "Specifying parameters"
        },
        {
            "location": "/howto/#option-1-in-order",
            "text": "Specify the parameters in the  exact  order given in the table on the documentation page. You do not have to specify all of the optional parameters, but you must specify them in order and not miss any out.  For example if the parameters available were  a, b, c, d, e   Specifying  a, b, c  is valid  Specifying  a, b, d, e  is not valid as you have missed out c but still specified later parameters   Here is an example of code with parameters specified in this way  app = App(\"Title of my app\")\ninput_box = TextBox(app, \"Type here\")  This way will probably be most useful for younger children where programs are not likely to need complex configuration options.",
            "title": "Option 1 - in order"
        },
        {
            "location": "/howto/#option-2-as-keyword-arguments",
            "text": "Compulsory parameters should always be specified in the exact order given in the documentation, for example the  master  parameter is a compulsory first parameter for all widgets.  If you only want to specify some of the  optional  parameters, you can specify them after the compulsory parameters in any order, using the format  parameter=value .  In this example the compulsory parameter  app  has been specified first, followed by the optional  width  parameter.  app = App()\ninput_box = TextBox(app, width=20)",
            "title": "Option 2 - as keyword arguments"
        },
        {
            "location": "/start/",
            "text": "Getting Started\n\n\nWe believe that it is important for children to be able to use and navigate documentation for themselves, so that their creativity is not limited by the features presented to them. We have provided comprehensive documentation of guizero and would encourage you to share this with children who use the library. Feedback on the accessibility of the documentation is very welcome.\n\n\nAt the start of every guizero program, you need to import the guizero library to be able to use its functionality, using \nfrom guizero import *\n. All examples in this documentation will assume you have used this import format.\n\n\nThis will import all of the guizero classes and functions into the current namespace, meaning that you can call them like this:\n\n\napp = App()\n\n\n\n\n... rather than like this:\n\n\napp = guizero.App()\n\n\n\n\nOf course, if you are a more competent programmer or need to avoid name clashes, feel free to use \nimport guizero\n or any other import format.\n\n\nHello World\n\n\nTo get started with guizero, you first need to create a main window which is called an App. At the end of every guizero program you must tell the program to display the app you have just created.\n\n\nLet's create an app window with the title \u201cHello world\u201d:\n\n\nfrom guizero import *\n\napp = App(\u201cHello world\u201d)\napp.display()\n\n\n\n\nSave and run the code - you've created your first guizero app!\n\n\nAdding widgets\n\n\nWidgets are the things which appear on the GUI, such as text boxes, buttons, sliders and even plain old pieces of text. Let\u2019s add a text widget to the app.\n\n\nfrom guizero import *\n\napp = App(\u201cHello world\u201d)\nmessage = Text(app, \u201cWelcome to the Hello world app!\u201d)\napp.display()\n\n\n\n\nThere is a new line of code to add a piece of text. Let\u2019s look at this piece of code in a bit more detail:\n\n\nmessage = Text(app, \u201cWelcome to the Hello world app!\u201d)\n\n\n\n\n\n\nmessage =\n - This Text object has a name so that you can refer to it later if you want to change its properties\n\n\nText\n - an \nobject\n which creates a piece of text on the screen\n\n\napp\n \u2013 The first \nargument\n in the brackets for any widget must be the \nmaster\n of this widget, the App or Box where this widget will live\n\n\n\"Welcome to the Hello world app!\"\n - The text to display\n\n\n\n\nYou can add as many widgets as you want. Code which creates a widget is always placed in between the line of code where you create the app and the line of code where you display the app.\n\n\nAnd that's it! Why not have a look on the documentation pages for the individual widgets to find out more about how to use them?",
            "title": "Getting Started"
        },
        {
            "location": "/start/#getting-started",
            "text": "We believe that it is important for children to be able to use and navigate documentation for themselves, so that their creativity is not limited by the features presented to them. We have provided comprehensive documentation of guizero and would encourage you to share this with children who use the library. Feedback on the accessibility of the documentation is very welcome.  At the start of every guizero program, you need to import the guizero library to be able to use its functionality, using  from guizero import * . All examples in this documentation will assume you have used this import format.  This will import all of the guizero classes and functions into the current namespace, meaning that you can call them like this:  app = App()  ... rather than like this:  app = guizero.App()  Of course, if you are a more competent programmer or need to avoid name clashes, feel free to use  import guizero  or any other import format.",
            "title": "Getting Started"
        },
        {
            "location": "/start/#hello-world",
            "text": "To get started with guizero, you first need to create a main window which is called an App. At the end of every guizero program you must tell the program to display the app you have just created.  Let's create an app window with the title \u201cHello world\u201d:  from guizero import *\n\napp = App(\u201cHello world\u201d)\napp.display()  Save and run the code - you've created your first guizero app!",
            "title": "Hello World"
        },
        {
            "location": "/start/#adding-widgets",
            "text": "Widgets are the things which appear on the GUI, such as text boxes, buttons, sliders and even plain old pieces of text. Let\u2019s add a text widget to the app.  from guizero import *\n\napp = App(\u201cHello world\u201d)\nmessage = Text(app, \u201cWelcome to the Hello world app!\u201d)\napp.display()  There is a new line of code to add a piece of text. Let\u2019s look at this piece of code in a bit more detail:  message = Text(app, \u201cWelcome to the Hello world app!\u201d)   message =  - This Text object has a name so that you can refer to it later if you want to change its properties  Text  - an  object  which creates a piece of text on the screen  app  \u2013 The first  argument  in the brackets for any widget must be the  master  of this widget, the App or Box where this widget will live  \"Welcome to the Hello world app!\"  - The text to display   You can add as many widgets as you want. Code which creates a widget is always placed in between the line of code where you create the app and the line of code where you display the app.  And that's it! Why not have a look on the documentation pages for the individual widgets to find out more about how to use them?",
            "title": "Adding widgets"
        },
        {
            "location": "/alerts/",
            "text": "Alerts\n\n\nPurpose\n\n\nThese functions pop up a box on the screen that displays a message. The functions available are:\n\n\n\n\nwarn(title, text)\n - popup box with a warning icon\n\n\ninfo(title, text)\n - popup box with an information icon\n\n\nerror(title, text)\n - popup box with an error icon\n\n\nyesno(title, text)\n - popup box with yes and no options. Pressing \nYes\n returns \nTrue\n and pressing \nNo\n returns \nFalse\n.\n\n\n\n\nAll pop up boxes use the native display, so they will look different depending on your operating system.\n\n\nExamples\n\n\nWarning box\n\n\nThis will pop up a warning box with the title \n\"Uh oh!\"\n and the message \n\"You are almost out of biscuits!\"\n.\n\n\napp = App(\"Biscuit monitor\")\nwarn(\"Uh oh!\", \"You are almost out of biscuits!\")\napp.display()\n\n\n\n\nOn Windows, the box looks like this:\n\n\n\n\nThe \ninfo\n and \nerror\n boxes work in exactly the same way but will display different icons.\n\n\nYes/No box\n\n\nWhen this function is called it returns a \nboolean\n value.\n\n\n\n\nIf \nYes\n was pressed, return \nTrue\n\n\nIf \nNo\n was pressed, return \nFalse\n\n\n\n\nYou can store this value in a variable and test it:\n\n\napp = App(\"Snowman\")\nbuild_a_snowman = yesno(\"A question...\", \"Do you want to build a snowman?\")\nif build_a_snowman == True:\n    info(\"Snowman\", \"It doesn't have to be a snowman\")\nelse:\n    error(\"Snowman\", \"Okay bye...\")\napp.display()\n\n\n\n\nThis code will first display the yes/no box\n\n\n\n\nIf \nYes\n is pressed, an information box will be displayed:\n\n\n\n\nIf \nNo\n is pressed, an error box will be displayed\n\n\n\n\nUsing functions as a callback\n\n\nYou can also use these functions in a \ncallback\n (when you have to provide a function for another widget to call). Here is an example with a \nPushButton\n which pops up an \ninfo\n box when it is pressed.\n\n\napp = App()\nbutton = PushButton(app, info, [\"Info\", \"You pressed the button\"])\napp.display()\n\n\n\n\nThe arguments provided to the \nPushButton\n are:\n\n\n\n\nWhere the button should be created (within the \napp\n)\n\n\nThe name of the function to call when pressed (\ninfo\n)\n\n\nA list of the arguments to the function you are calling (values for the \ntitle\n and \nmessage\n arguments for the \ninfo\n function)",
            "title": "Alerts"
        },
        {
            "location": "/alerts/#alerts",
            "text": "",
            "title": "Alerts"
        },
        {
            "location": "/alerts/#purpose",
            "text": "These functions pop up a box on the screen that displays a message. The functions available are:   warn(title, text)  - popup box with a warning icon  info(title, text)  - popup box with an information icon  error(title, text)  - popup box with an error icon  yesno(title, text)  - popup box with yes and no options. Pressing  Yes  returns  True  and pressing  No  returns  False .   All pop up boxes use the native display, so they will look different depending on your operating system.",
            "title": "Purpose"
        },
        {
            "location": "/alerts/#examples",
            "text": "Warning box  This will pop up a warning box with the title  \"Uh oh!\"  and the message  \"You are almost out of biscuits!\" .  app = App(\"Biscuit monitor\")\nwarn(\"Uh oh!\", \"You are almost out of biscuits!\")\napp.display()  On Windows, the box looks like this:   The  info  and  error  boxes work in exactly the same way but will display different icons.  Yes/No box  When this function is called it returns a  boolean  value.   If  Yes  was pressed, return  True  If  No  was pressed, return  False   You can store this value in a variable and test it:  app = App(\"Snowman\")\nbuild_a_snowman = yesno(\"A question...\", \"Do you want to build a snowman?\")\nif build_a_snowman == True:\n    info(\"Snowman\", \"It doesn't have to be a snowman\")\nelse:\n    error(\"Snowman\", \"Okay bye...\")\napp.display()  This code will first display the yes/no box   If  Yes  is pressed, an information box will be displayed:   If  No  is pressed, an error box will be displayed   Using functions as a callback  You can also use these functions in a  callback  (when you have to provide a function for another widget to call). Here is an example with a  PushButton  which pops up an  info  box when it is pressed.  app = App()\nbutton = PushButton(app, info, [\"Info\", \"You pressed the button\"])\napp.display()  The arguments provided to the  PushButton  are:   Where the button should be created (within the  app )  The name of the function to call when pressed ( info )  A list of the arguments to the function you are calling (values for the  title  and  message  arguments for the  info  function)",
            "title": "Examples"
        },
        {
            "location": "/app/",
            "text": "App\n\n\n(Extends the \nTk\n class from \ntkinter\n)\n\n\nPurpose\n\n\nThe \nApp\n object  is the basis of all GUIs created using GUIzero. You can imagine it as a container, to which other widgets are added.\n\n\nclass guizero.App(title=\"GUIzero\", height=500, width=500, layout=\"auto\")\n\n\n\n\nDocumentation\n\n\nCreate an App object like this:\n\n\napp = App()\n\n\n\n\nParameters\n\n\nWhen creating an \nApp\n object, you can specify the following parameters, all of which are optional. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n\"GUIzero\"\n\n\nNo\n\n\nThe title displayed in the bar at the top of the window.\n\n\n\n\n\n\nheight\n\n\nint\n\n\n500\n\n\nNo\n\n\nThe height of the window in pixels.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\n500\n\n\nNo\n\n\nThe width of the window in pixels.\n\n\n\n\n\n\nlayout\n\n\nstring\n\n\n\"auto\"\n\n\nNo\n\n\nWhether widgets pack themselves (\n\"auto\"\n) or you specify their position on a grid (\n\"grid\"\n)\n\n\n\n\n\n\n\n\nAbout the 'layout' parameter\n\n\nThe parameter \nlayout\n allows you to specify whether the widgets in your app are placed automatically (\nauto\n), or whether you wish to position them yourself on a grid (\ngrid\n). The default layout is \nauto\n.\n\n\nIf you choose the \ngrid\n layout, this means that when you create a widget you will need to pass the widget an extra parameter called \ngrid\n which is a list containing \n[x,y]\n coordinates for where you want the widget to appear within the app, like this:\n\n\ntext = Text(app, text=\"Hello world\", grid=[0,1])\n\n\n\n\nThere is no need to specify the width or height of the grid you want - it will expand depending on the coordinates you provide with each widget. However, grid cells containing no objects will have no height or width.\n\n\nMethods summary\n\n\nYou can call the following methods on your App object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndisplay()\n\n\n-\n\n\n-\n\n\nDisplays the app on the screen. You \nMUST\n call this method at the end of your program to display the app on the screen.\n\n\n\n\n\n\nset_title(title)\n\n\ntitle (string)\n\n\n-\n\n\nTakes a string \ntitle\n and displays this in the top bar of the app window\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating an App object\n\n\nYou can create an \nApp\n object by calling the \nApp()\n constructor. You should give the object a name so you can refer to it later - in this case we have called it \napp\n.\n\n\nIt is best to keep the name you give to your \nApp\n object quite short, as you will have to use it to tell other widgets where they should be stored.\n\n\nThen, at the end of the program you \nMUST\n tell the app object to display itself, or nothing will be displayed on the screen.\n\n\napp = App(\"My app\", 300, 200, \"auto\")\napp.display()\n\n\n\n\nChanging the title\n\n\nYou can change the title of the app object once it has been created like this:\n\n\napp = App(\"My app\", 300, 200, \"auto\")\napp.set_title(\"A different title\")\napp.display()\n\n\n\n\nThis will display the app with the updated title:\n\n\n\n\nUsing grid layout\n\n\nYou can lay components out in a grid and specify where they appear with grid layout.\n\n\n\n\ndef do_nothing():\n    print(\"Nothing happened\")\n\napp = App(\"Keypad example\", width=100, height=90, layout=\"grid\")\nbutton1 = PushButton(app, do_nothing, text=\"1\", grid=[0,0])\nbutton2 = PushButton(app, do_nothing, text=\"2\", grid=[0,1])\nbutton3  = PushButton(app, do_nothing, text=\"3\", grid=[0,2])\nbutton4  = PushButton(app, do_nothing, text=\"4\", grid=[1,0])\nbutton5  = PushButton(app, do_nothing, text=\"5\", grid=[1,1])\nbutton6  = PushButton(app, do_nothing, text=\"6\", grid=[1,2])\napp.display()",
            "title": "App"
        },
        {
            "location": "/app/#app",
            "text": "(Extends the  Tk  class from  tkinter )",
            "title": "App"
        },
        {
            "location": "/app/#purpose",
            "text": "The  App  object  is the basis of all GUIs created using GUIzero. You can imagine it as a container, to which other widgets are added.  class guizero.App(title=\"GUIzero\", height=500, width=500, layout=\"auto\")",
            "title": "Purpose"
        },
        {
            "location": "/app/#documentation",
            "text": "Create an App object like this:  app = App()  Parameters  When creating an  App  object, you can specify the following parameters, all of which are optional. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Data type  Default  Compulsory  Description      title  string  \"GUIzero\"  No  The title displayed in the bar at the top of the window.    height  int  500  No  The height of the window in pixels.    width  int  500  No  The width of the window in pixels.    layout  string  \"auto\"  No  Whether widgets pack themselves ( \"auto\" ) or you specify their position on a grid ( \"grid\" )     About the 'layout' parameter  The parameter  layout  allows you to specify whether the widgets in your app are placed automatically ( auto ), or whether you wish to position them yourself on a grid ( grid ). The default layout is  auto .  If you choose the  grid  layout, this means that when you create a widget you will need to pass the widget an extra parameter called  grid  which is a list containing  [x,y]  coordinates for where you want the widget to appear within the app, like this:  text = Text(app, text=\"Hello world\", grid=[0,1])  There is no need to specify the width or height of the grid you want - it will expand depending on the coordinates you provide with each widget. However, grid cells containing no objects will have no height or width.",
            "title": "Documentation"
        },
        {
            "location": "/app/#methods-summary",
            "text": "You can call the following methods on your App object     Method  Takes  Returns  Description      display()  -  -  Displays the app on the screen. You  MUST  call this method at the end of your program to display the app on the screen.    set_title(title)  title (string)  -  Takes a string  title  and displays this in the top bar of the app window",
            "title": "Methods summary"
        },
        {
            "location": "/app/#examples",
            "text": "Creating an App object  You can create an  App  object by calling the  App()  constructor. You should give the object a name so you can refer to it later - in this case we have called it  app .  It is best to keep the name you give to your  App  object quite short, as you will have to use it to tell other widgets where they should be stored.  Then, at the end of the program you  MUST  tell the app object to display itself, or nothing will be displayed on the screen.  app = App(\"My app\", 300, 200, \"auto\")\napp.display()  Changing the title  You can change the title of the app object once it has been created like this:  app = App(\"My app\", 300, 200, \"auto\")\napp.set_title(\"A different title\")\napp.display()  This will display the app with the updated title:   Using grid layout  You can lay components out in a grid and specify where they appear with grid layout.   def do_nothing():\n    print(\"Nothing happened\")\n\napp = App(\"Keypad example\", width=100, height=90, layout=\"grid\")\nbutton1 = PushButton(app, do_nothing, text=\"1\", grid=[0,0])\nbutton2 = PushButton(app, do_nothing, text=\"2\", grid=[0,1])\nbutton3  = PushButton(app, do_nothing, text=\"3\", grid=[0,2])\nbutton4  = PushButton(app, do_nothing, text=\"4\", grid=[1,0])\nbutton5  = PushButton(app, do_nothing, text=\"5\", grid=[1,1])\nbutton6  = PushButton(app, do_nothing, text=\"6\", grid=[1,2])\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/box/",
            "text": "Box\n\n\n(Extends the \nFrame\n class from \ntkinter\n)\n\n\nPurpose\n\n\nThe \nBox\n object is an invisible container which can contain other widgets. It is the only object other than \nApp\n which can act as the \nmaster\n for other objects and can have its own layout manager.\n\n\nYou can use the \nBox\n object to group other objects within your GUI.\n\n\nclass guizero.Box(master, layout=\"auto\", grid=None, align=None)\n\n\n\n\nDocumentation\n\n\nCreate a Box object like this:\n\n\napp = App()\nbox = Box(app)\napp.display()\n\n\n\n\nParameters\n\n\nWhen creating a \nBox\n object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp\n\n\n-\n\n\nYes\n\n\nThe \nApp\n object to which this box belongs\n\n\n\n\n\n\nlayout\n\n\nstring\n\n\n\"auto\"\n\n\nNo\n\n\nWhether widgets \ninside this box\n pack themselves (\n\"auto\"\n) or you specify their position on a grid (\n\"grid\"\n)\n\n\n\n\n\n\ngrid\n\n\nList\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nAbout the 'layout' parameter\n\n\nThe parameter \nlayout\n allows you to specify whether the widgets inside the box are placed automatically (\nauto\n), or whether you wish to position them yourself on a grid (\ngrid\n). The default layout is auto.\n\n\nIf you choose the \ngrid\n layout, this means that when you create a widget and set a box as its \nmaster\n, you will need to pass the widget an extra parameter called \ngrid\n which is a list containing two coordinates (x,y) for where you want the widget to appear on the grid within the box, like this:\n\n\ntext = Text(box, text=\"Hello world\", grid=[0,1])\n\n\n\n\nThere is no need to specify the width or height of the grid you want - it will expand depending on the coordinates you provide with each widget. However, grid cells containing no objects will have no height or width.\n\n\nMethods summary\n\n\nThere are no methods for the \nBox\n object\n\n\nExamples\n\n\nPutting widgets in a Box\n\n\nA \nBox\n object is invisible, but it can contain other widgets. In this example, there are two \nText\n objects. One has \nbox\n as its master, the other has \napp\n as its master.\n\n\napp = App(\"My app\", 300, 200)\nbox = Box(app)\ntext1 = Text(box, \"Hello from the box\", 14, \"red\", \"Arial\")\ntext2 = Text(app, \"Hello from the app\", 14, \"blue\", \"Courier New\")\napp.display()\n\n\n\n\nGrouping objects within a Box\n\n\nIt is useful to put objects in a box to group them together. For example here we have given the \napp\n a grid layout, then placed some text at [0,0] and the \nBox\n object at [0,1]. This means that the text will appear on the left, and the contents of the Box will appear on the right.\n\n\nThe \nBox\n object itself has a grid layout and contains six buttons which are positioned on a \nseparate\n grid layout belonging to the box.\n\n\n\ndef do_nothing():\n    return 0\n\napp = App(\"My app\", 300, 200, layout=\"grid\")\ntext = Text(app, \"Some text here\", grid=[0,0])\nbox = Box(app, layout=\"grid\", grid=[0,1])\nbutton1 = PushButton(box, do_nothing, text=\"1\", grid=[0,0])\nbutton2 = PushButton(box, do_nothing, text=\"2\", grid=[0,1])\nbutton3 = PushButton(box, do_nothing, text=\"3\", grid=[0,2])\nbutton4 = PushButton(box, do_nothing, text=\"4\", grid=[1,0])\nbutton5 = PushButton(box, do_nothing, text=\"5\", grid=[1,1])\nbutton6 = PushButton(box, do_nothing, text=\"6\", grid=[1,2])\napp.display()",
            "title": "Box"
        },
        {
            "location": "/box/#box",
            "text": "(Extends the  Frame  class from  tkinter )",
            "title": "Box"
        },
        {
            "location": "/box/#purpose",
            "text": "The  Box  object is an invisible container which can contain other widgets. It is the only object other than  App  which can act as the  master  for other objects and can have its own layout manager.  You can use the  Box  object to group other objects within your GUI.  class guizero.Box(master, layout=\"auto\", grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/box/#documentation",
            "text": "Create a Box object like this:  app = App()\nbox = Box(app)\napp.display()  Parameters  When creating a  Box  object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Data type  Default  Compulsory  Description      master  App  -  Yes  The  App  object to which this box belongs    layout  string  \"auto\"  No  Whether widgets  inside this box  pack themselves ( \"auto\" ) or you specify their position on a grid ( \"grid\" )    grid  List  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.     About the 'layout' parameter  The parameter  layout  allows you to specify whether the widgets inside the box are placed automatically ( auto ), or whether you wish to position them yourself on a grid ( grid ). The default layout is auto.  If you choose the  grid  layout, this means that when you create a widget and set a box as its  master , you will need to pass the widget an extra parameter called  grid  which is a list containing two coordinates (x,y) for where you want the widget to appear on the grid within the box, like this:  text = Text(box, text=\"Hello world\", grid=[0,1])  There is no need to specify the width or height of the grid you want - it will expand depending on the coordinates you provide with each widget. However, grid cells containing no objects will have no height or width.",
            "title": "Documentation"
        },
        {
            "location": "/box/#methods-summary",
            "text": "There are no methods for the  Box  object",
            "title": "Methods summary"
        },
        {
            "location": "/box/#examples",
            "text": "Putting widgets in a Box  A  Box  object is invisible, but it can contain other widgets. In this example, there are two  Text  objects. One has  box  as its master, the other has  app  as its master.  app = App(\"My app\", 300, 200)\nbox = Box(app)\ntext1 = Text(box, \"Hello from the box\", 14, \"red\", \"Arial\")\ntext2 = Text(app, \"Hello from the app\", 14, \"blue\", \"Courier New\")\napp.display()  Grouping objects within a Box  It is useful to put objects in a box to group them together. For example here we have given the  app  a grid layout, then placed some text at [0,0] and the  Box  object at [0,1]. This means that the text will appear on the left, and the contents of the Box will appear on the right.  The  Box  object itself has a grid layout and contains six buttons which are positioned on a  separate  grid layout belonging to the box.  \ndef do_nothing():\n    return 0\n\napp = App(\"My app\", 300, 200, layout=\"grid\")\ntext = Text(app, \"Some text here\", grid=[0,0])\nbox = Box(app, layout=\"grid\", grid=[0,1])\nbutton1 = PushButton(box, do_nothing, text=\"1\", grid=[0,0])\nbutton2 = PushButton(box, do_nothing, text=\"2\", grid=[0,1])\nbutton3 = PushButton(box, do_nothing, text=\"3\", grid=[0,2])\nbutton4 = PushButton(box, do_nothing, text=\"4\", grid=[1,0])\nbutton5 = PushButton(box, do_nothing, text=\"5\", grid=[1,1])\nbutton6 = PushButton(box, do_nothing, text=\"6\", grid=[1,2])\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/buttongroup/",
            "text": "ButtonGroup\n\n\n(Extends the \nFrame\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a group of radio buttons to allow the user to choose an option\n\n\nclass guizero.ButtonGroup(master, options, selected, orient=\"vertical\", command=None, grid=None, align=None)\n\n\n\n\nCreate a ButtonGroup object\n\n\nCreate a basic ButtonGroup object like this:\n\n\napp = App()\nchoice = ButtonGroup(app,\n                         [[\"cheese\", 0],\n                          [\"ham\", 1],\n                          [\"salad\", 2]],\n                     2)\napp.display()\n\n\n\n\n\nThe \noptions\n parameter takes a 2D list (a list of lists) of options to display. The numerical values in this example are hidden, but will be returned by the method \nget()\n. \nAll items provided in the options list will be autmatically converted to strings when added to the ButtonGroup.\n\n\nThe code above will look like this on Windows:\n\n\n\n\nWhen creating a ButtonGroup object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\noptions\n\n\n2D List\n\n\n-\n\n\nYes\n\n\nA two dimensional list of [text, value] pairs. The first item in the pair will be displayed on the interface, and the second item will be a hidden value associated with this option.\n\n\n\n\n\n\nselected\n\n\nstring\n\n\n-\n\n\nYes\n\n\nThe option that is selected. This should be the \nhidden value\n and NOT the text.\n\n\n\n\n\n\norient\n\n\nstring\n\n\n\"vertical\"\n\n\nNo\n\n\nWhether the buttons stack vertically or horizontally.\n\n\n\n\n\n\ncommand\n\n\nfunction name\n\n\nNone\n\n\nNo\n\n\nThe name of a function to call when a different option is selected.\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your ButtonGroup object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget()\n\n\n-\n\n\nstring\n\n\nReturns the \nhidden value\n associated with the selected option (NOT the text associated with the option)\n\n\n\n\n\n\nset(value)\n\n\nvalue (string)\n\n\n-\n\n\nSets the selected option to the option with the string \nvalue\n as its \nhidden value\n\n\n\n\n\n\nget_group_as_list()\n\n\n-\n\n\nList\n\n\nReturns a list containing all of the text/hidden value pairs from the ButtonGroup (useful for debugging)\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a ButtonGroup\n\n\nThe simplest way to create a ButtonGroup object is as follows:\n\n\napp = App()\nactivties = ButtonGroup(app, [\n                              [\"Roller Skating\", \"skate\"],\n                              [\"White water rafting\", \"WWR\"],\n                              [\"Mountain climbing\", \"climb\"]\n                            ],\n                             \"skate\")\napp.display()",
            "title": "ButtonGroup"
        },
        {
            "location": "/buttongroup/#buttongroup",
            "text": "(Extends the  Frame  class from  tkinter )",
            "title": "ButtonGroup"
        },
        {
            "location": "/buttongroup/#purpose",
            "text": "Display a group of radio buttons to allow the user to choose an option  class guizero.ButtonGroup(master, options, selected, orient=\"vertical\", command=None, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/buttongroup/#create-a-buttongroup-object",
            "text": "Create a basic ButtonGroup object like this:  app = App()\nchoice = ButtonGroup(app,\n                         [[\"cheese\", 0],\n                          [\"ham\", 1],\n                          [\"salad\", 2]],\n                     2)\napp.display()  The  options  parameter takes a 2D list (a list of lists) of options to display. The numerical values in this example are hidden, but will be returned by the method  get() .  All items provided in the options list will be autmatically converted to strings when added to the ButtonGroup.  The code above will look like this on Windows:   When creating a ButtonGroup object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    options  2D List  -  Yes  A two dimensional list of [text, value] pairs. The first item in the pair will be displayed on the interface, and the second item will be a hidden value associated with this option.    selected  string  -  Yes  The option that is selected. This should be the  hidden value  and NOT the text.    orient  string  \"vertical\"  No  Whether the buttons stack vertically or horizontally.    command  function name  None  No  The name of a function to call when a different option is selected.    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a ButtonGroup object"
        },
        {
            "location": "/buttongroup/#methods",
            "text": "You can call the following methods on your ButtonGroup object     Method  Takes  Returns  Description      get()  -  string  Returns the  hidden value  associated with the selected option (NOT the text associated with the option)    set(value)  value (string)  -  Sets the selected option to the option with the string  value  as its  hidden value    get_group_as_list()  -  List  Returns a list containing all of the text/hidden value pairs from the ButtonGroup (useful for debugging)",
            "title": "Methods"
        },
        {
            "location": "/buttongroup/#examples",
            "text": "Creating a ButtonGroup  The simplest way to create a ButtonGroup object is as follows:  app = App()\nactivties = ButtonGroup(app, [\n                              [\"Roller Skating\", \"skate\"],\n                              [\"White water rafting\", \"WWR\"],\n                              [\"Mountain climbing\", \"climb\"]\n                            ],\n                             \"skate\")\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/checkbox/",
            "text": "CheckBox\n\n\n(Extends the \nCheckbutton\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a check box to allow an option to be ticked or unticked\n\n\nclass guizero.CheckBox(master, text, command=None, grid=None, align=None)\n\n\n\n\nCreate a CheckBox object\n\n\nCreate a basic CheckBox object like this:\n\n\napp = App()\ncheckbox = CheckBox(app, \"Add extra glitter\")\napp.display()\n\n\n\n\n\nThe above code looks like this on Windows:\n\n\n\nWhen creating a CheckBox object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\ntext\n\n\nstring\n\n\n-\n\n\nYes\n\n\nThe text to display next to the check box\n\n\n\n\n\n\ncommand\n\n\nfunction name\n\n\nNone\n\n\nNo\n\n\nThe name of a function to call when this checkbox is ticked/unticked\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your CheckBox object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_text()\n\n\n-\n\n\nstring\n\n\nReturns the text associated with this CheckBox\n\n\n\n\n\n\nget_value()\n\n\n-\n\n\nint\n\n\nReturns 1 if the CheckBox is ticked or 0 if it is not ticked\n\n\n\n\n\n\ntoggle()\n\n\n-\n\n\n-\n\n\nSwitches the CheckBox to the opposite of its current value. i.e. if it is ticked, untick it and vice versa\n\n\n\n\n\n\nchange_text(newtext)\n\n\nnewtext (string)\n\n\n-\n\n\nSets the text associated with this CheckBox to the string \nnewtext\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a CheckBox\n\n\nThe simplest way to create a CheckBox object is as follows:\n\n\napp = App()\nglitter = CheckBox(app, \"Add glitter\")\nsparkles = CheckBox(app, \"Add sparkles\")\napp.display()\n\n\n\n\nCalling a function when a CheckBox value changes\n\n\nYou can call a function when the value of a CheckBox changes (becomes ticked or unticked). In this example, all three CheckBoxes call the same function, but each CheckBox object could call a different function.\n\n\ndef calculate_extras():\n    total = 0\n    if syrup.get_value() == 1:\n        total += 20\n    if sprinkles.get_value() == 1:\n        total += 10\n    if cream.get_value() == 1:\n        total += 50\n    cost.set(total)\n\n\napp = App()\n\nquestions = Text(app, \"What would you like with your coffee?\")\n\nsyrup = CheckBox(app, \"Caramel syrup (20p)\", command=calculate_extras)\nsprinkles = CheckBox(app, \"Chocolate sprinkles (10p)\", command=calculate_extras)\ncream = CheckBox(app, \"Whipped cream (50p)\", command=calculate_extras)\n\ncost_of_extras = Text(app, \"Cost of extras:\")\ncost = TextBox(app, \"0\")\n\napp.display()",
            "title": "CheckBox"
        },
        {
            "location": "/checkbox/#checkbox",
            "text": "(Extends the  Checkbutton  class from  tkinter )",
            "title": "CheckBox"
        },
        {
            "location": "/checkbox/#purpose",
            "text": "Display a check box to allow an option to be ticked or unticked  class guizero.CheckBox(master, text, command=None, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/checkbox/#create-a-checkbox-object",
            "text": "Create a basic CheckBox object like this:  app = App()\ncheckbox = CheckBox(app, \"Add extra glitter\")\napp.display()  The above code looks like this on Windows:  When creating a CheckBox object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    text  string  -  Yes  The text to display next to the check box    command  function name  None  No  The name of a function to call when this checkbox is ticked/unticked    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a CheckBox object"
        },
        {
            "location": "/checkbox/#methods",
            "text": "You can call the following methods on your CheckBox object     Method  Takes  Returns  Description      get_text()  -  string  Returns the text associated with this CheckBox    get_value()  -  int  Returns 1 if the CheckBox is ticked or 0 if it is not ticked    toggle()  -  -  Switches the CheckBox to the opposite of its current value. i.e. if it is ticked, untick it and vice versa    change_text(newtext)  newtext (string)  -  Sets the text associated with this CheckBox to the string  newtext",
            "title": "Methods"
        },
        {
            "location": "/checkbox/#examples",
            "text": "Creating a CheckBox  The simplest way to create a CheckBox object is as follows:  app = App()\nglitter = CheckBox(app, \"Add glitter\")\nsparkles = CheckBox(app, \"Add sparkles\")\napp.display()  Calling a function when a CheckBox value changes  You can call a function when the value of a CheckBox changes (becomes ticked or unticked). In this example, all three CheckBoxes call the same function, but each CheckBox object could call a different function.  def calculate_extras():\n    total = 0\n    if syrup.get_value() == 1:\n        total += 20\n    if sprinkles.get_value() == 1:\n        total += 10\n    if cream.get_value() == 1:\n        total += 50\n    cost.set(total)\n\n\napp = App()\n\nquestions = Text(app, \"What would you like with your coffee?\")\n\nsyrup = CheckBox(app, \"Caramel syrup (20p)\", command=calculate_extras)\nsprinkles = CheckBox(app, \"Chocolate sprinkles (10p)\", command=calculate_extras)\ncream = CheckBox(app, \"Whipped cream (50p)\", command=calculate_extras)\n\ncost_of_extras = Text(app, \"Cost of extras:\")\ncost = TextBox(app, \"0\")\n\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/combo/",
            "text": "Combo\n\n\n(Extends the \nOptionMenu\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a drop down box allowing an option to be selected from a list of options\n\n\nclass guizero.Combo(master, options, selected=None, command=None, grid=None, align=None)\n\n\n\n\nCreate a Combo object\n\n\nCreate a basic Combo object like this:\n\n\napp = App()\ncombo = Combo(app, [\"Beef\", \"Chicken\", \"Fish\", \"Vegetarian\"])\napp.display()\n\n\n\n\nThe options parameter should be a list of options you wish to display in the combo box. \nAll options will be converted to strings when added to the Combo box.\n\n\nThe above code looks like this on Windows:\n\n\n\nWhen creating a Combo object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\noptions\n\n\nList\n\n\n-\n\n\nYes\n\n\nA list of options to display\n\n\n\n\n\n\ncommand\n\n\nfunction name\n\n\nNone\n\n\nNo\n\n\nThe name of a function to call when a different option is selected. The command can \nonly\n be specified when creating the Combo object and cannot be changed later.\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your Combo object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget()\n\n\n-\n\n\nstring\n\n\nReturns the currently selected option\n\n\n\n\n\n\nset(text)\n\n\ntext (string)\n\n\n-\n\n\nSets the currently selected option to the option matching the string \ntext\n\n\n\n\n\n\nselect_default()\n\n\n-\n\n\n-\n\n\nResets the combo box so that the first item in the list is selected\n\n\n\n\n\n\nadd_option(option)\n\n\noption (string)\n\n\n-\n\n\nAdds a new item to the combo box with the value \noption\n\n\n\n\n\n\nclear()\n\n\n-\n\n\n-\n\n\nRemoves all options from the Combo box\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a Combo\n\n\nThe simplest way to create a Combo object is as follows:\n\n\napp = App()\ncombo = Combo(app, [\"Beef\", \"Chicken\", \"Fish\", \"Vegetarian\"])\napp.display()\n\n\n\n\nCalling a function when the value selected changes\n\n\nYou can call a function when the selected value in a Combo object changes. This must be set up at the time you create the Combo object and cannot be defined later. The function you call \nMUST\n take a minimum of one parameter as it will automatically be passed a string containing the currently selected value in the Combo object.\n\n\ndef you_chose(selected_value):\n    result.set(\"You chose...\")\n    if selected_value == \"Tiny goblet\":\n        result.append(\"wisely\")\n    else:\n        result.append(\"poorly\")\n\napp = App()\ninstructions = Text(app, \"Choose a goblet\")\ncombo = Combo(app, [\"\", \"Huge golden goblet\", \"Jewel encrusted goblet\", \"Tiny goblet\"], command=you_chose)\nresult = Text(app)\napp.display()",
            "title": "Combo"
        },
        {
            "location": "/combo/#combo",
            "text": "(Extends the  OptionMenu  class from  tkinter )",
            "title": "Combo"
        },
        {
            "location": "/combo/#purpose",
            "text": "Display a drop down box allowing an option to be selected from a list of options  class guizero.Combo(master, options, selected=None, command=None, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/combo/#create-a-combo-object",
            "text": "Create a basic Combo object like this:  app = App()\ncombo = Combo(app, [\"Beef\", \"Chicken\", \"Fish\", \"Vegetarian\"])\napp.display()  The options parameter should be a list of options you wish to display in the combo box.  All options will be converted to strings when added to the Combo box.  The above code looks like this on Windows:  When creating a Combo object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    options  List  -  Yes  A list of options to display    command  function name  None  No  The name of a function to call when a different option is selected. The command can  only  be specified when creating the Combo object and cannot be changed later.    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a Combo object"
        },
        {
            "location": "/combo/#methods",
            "text": "You can call the following methods on your Combo object     Method  Takes  Returns  Description      get()  -  string  Returns the currently selected option    set(text)  text (string)  -  Sets the currently selected option to the option matching the string  text    select_default()  -  -  Resets the combo box so that the first item in the list is selected    add_option(option)  option (string)  -  Adds a new item to the combo box with the value  option    clear()  -  -  Removes all options from the Combo box",
            "title": "Methods"
        },
        {
            "location": "/combo/#examples",
            "text": "Creating a Combo  The simplest way to create a Combo object is as follows:  app = App()\ncombo = Combo(app, [\"Beef\", \"Chicken\", \"Fish\", \"Vegetarian\"])\napp.display()  Calling a function when the value selected changes  You can call a function when the selected value in a Combo object changes. This must be set up at the time you create the Combo object and cannot be defined later. The function you call  MUST  take a minimum of one parameter as it will automatically be passed a string containing the currently selected value in the Combo object.  def you_chose(selected_value):\n    result.set(\"You chose...\")\n    if selected_value == \"Tiny goblet\":\n        result.append(\"wisely\")\n    else:\n        result.append(\"poorly\")\n\napp = App()\ninstructions = Text(app, \"Choose a goblet\")\ncombo = Combo(app, [\"\", \"Huge golden goblet\", \"Jewel encrusted goblet\", \"Tiny goblet\"], command=you_chose)\nresult = Text(app)\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/menubar/",
            "text": "MenuBar\n\n\n(Extends the \nMenu\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a menu at the top of the screen, each option having a submenu\n\n\nclass guizero.MenuBar(master, toplevel, options)\n\n\n\n\nCreate a MenuBar object\n\n\nCreate a basic MenuBar object like this:\n\n\ndef file_function():\n    print(\"File option\")\n\ndef edit_function():\n    print(\"Edit option\")\n\napp = App()\nmenubar = MenuBar(app,\n                  [\"File\", \"Edit\"],\n                  [\n                      [ [\"File option 1\", file_function], [\"File option 2\", file_function] ],\n                      [ [\"Edit option 1\", edit_function], [\"Edit option 2\", edit_function] ]\n                  ])\napp.display()\n\n\n\n\n\nThe \ntoplevel\n parameter should be a list of options you wish to display on the menu. In this example the toplevel options are File and Edit:\n\n\n\n\nThe options parameter should be a 3D List containing lists of submenu items, which are themselves lists. The elements in the list correspond to the elements in the \ntoplevel\n list, so the first list of submenu items provided in \noptions\n will be the submenu for the first menu heading provided in \ntoplevel\n and so on.\n\n\nThe menu item sub-sublists within \noptions\n should contain pairs consisting of the text to display on the menu and the function to call when that option is selected. In this example, the text \"File option 1\" is displayed and the function \nfile_function\n is called if this option is clicked on.\n\n\n[\"File option 1\", file_function]\n\n\n\n\nHere is what this code looks like on Windows:\n\n\n\n\nWhen creating a MenuBar object, you must specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\ntoplevel\n\n\nList\n\n\n-\n\n\nYes\n\n\nA list of top level menu items\n\n\n\n\n\n\noptions\n\n\n3D List\n\n\n-\n\n\nYes\n\n\nA list of submenus, with each submenu being a list of options and each option being a text/command pair. See notes above for more details.\n\n\n\n\n\n\n\n\nThe MenuBar is never displayed on a grid so there are no grid or alignment parameters.\n\n\nMethods\n\n\nThere are no methods for the MenuBar object\n\n\nExamples\n\n\nCreating a MenuBar\n\n\nThe simplest way to create a MenuBar object is as follows:\n\n\ndef file_function():\n    print(\"File option\")\n\ndef edit_function():\n    print(\"Edit option\")\n\napp = App()\nmenubar = MenuBar(app,\n                  [\"File\", \"Edit\"],\n                  [\n                      [ [\"File option 1\", file_function], [\"File option 2\", file_function] ],\n                      [ [\"Edit option 1\", edit_function], [\"Edit option 2\", edit_function] ]\n                  ])\napp.display()",
            "title": "MenuBar"
        },
        {
            "location": "/menubar/#menubar",
            "text": "(Extends the  Menu  class from  tkinter )",
            "title": "MenuBar"
        },
        {
            "location": "/menubar/#purpose",
            "text": "Display a menu at the top of the screen, each option having a submenu  class guizero.MenuBar(master, toplevel, options)",
            "title": "Purpose"
        },
        {
            "location": "/menubar/#create-a-menubar-object",
            "text": "Create a basic MenuBar object like this:  def file_function():\n    print(\"File option\")\n\ndef edit_function():\n    print(\"Edit option\")\n\napp = App()\nmenubar = MenuBar(app,\n                  [\"File\", \"Edit\"],\n                  [\n                      [ [\"File option 1\", file_function], [\"File option 2\", file_function] ],\n                      [ [\"Edit option 1\", edit_function], [\"Edit option 2\", edit_function] ]\n                  ])\napp.display()  The  toplevel  parameter should be a list of options you wish to display on the menu. In this example the toplevel options are File and Edit:   The options parameter should be a 3D List containing lists of submenu items, which are themselves lists. The elements in the list correspond to the elements in the  toplevel  list, so the first list of submenu items provided in  options  will be the submenu for the first menu heading provided in  toplevel  and so on.  The menu item sub-sublists within  options  should contain pairs consisting of the text to display on the menu and the function to call when that option is selected. In this example, the text \"File option 1\" is displayed and the function  file_function  is called if this option is clicked on.  [\"File option 1\", file_function]  Here is what this code looks like on Windows:   When creating a MenuBar object, you must specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App  -  Yes  The container to which this widget belongs    toplevel  List  -  Yes  A list of top level menu items    options  3D List  -  Yes  A list of submenus, with each submenu being a list of options and each option being a text/command pair. See notes above for more details.     The MenuBar is never displayed on a grid so there are no grid or alignment parameters.",
            "title": "Create a MenuBar object"
        },
        {
            "location": "/menubar/#methods",
            "text": "There are no methods for the MenuBar object",
            "title": "Methods"
        },
        {
            "location": "/menubar/#examples",
            "text": "Creating a MenuBar  The simplest way to create a MenuBar object is as follows:  def file_function():\n    print(\"File option\")\n\ndef edit_function():\n    print(\"Edit option\")\n\napp = App()\nmenubar = MenuBar(app,\n                  [\"File\", \"Edit\"],\n                  [\n                      [ [\"File option 1\", file_function], [\"File option 2\", file_function] ],\n                      [ [\"Edit option 1\", edit_function], [\"Edit option 2\", edit_function] ]\n                  ])\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/picture/",
            "text": "Picture\n\n\n(Extends the \nLabel\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a GIF image\n\n\nclass guizero.Picture(master, image, grid=None, align=None)\n\n\n\n\nCreate a Picture object\n\n\nCreate a basic Picture object like this (assuming your image is called \ntest.gif\n)\n\n\napp = App()\npicture = Picture(app, \"test.gif\")\napp.display()\n\n\n\n\nYou must specify the correct path to the image. The image in the example is in the same directory as the program. If the image is in a different directory, specify a relative path, for example if the picture is in a subfolder called \nimages\n you would write:\n\n\npicture = Picture(app, \"images/test.gif\")\n\n\n\n\nThe code looks like this on Windows:\n\n\n\n\nWhen creating a Picture object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\nimage\n\n\nList\n\n\n-\n\n\nYes\n\n\nThe path to the image file you wish to display\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your Picture object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nset(image)\n\n\nimage (string)\n\n\n\n\nSets the picture displayed to the picture located at the path specified in the string \nimage\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a Picture\n\n\nThe simplest way to create a Picture object is as follows:\n\n\napp = App()\npicture = Picture(app, \"test.gif\")\napp.display()",
            "title": "Picture"
        },
        {
            "location": "/picture/#picture",
            "text": "(Extends the  Label  class from  tkinter )",
            "title": "Picture"
        },
        {
            "location": "/picture/#purpose",
            "text": "Display a GIF image  class guizero.Picture(master, image, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/picture/#create-a-picture-object",
            "text": "Create a basic Picture object like this (assuming your image is called  test.gif )  app = App()\npicture = Picture(app, \"test.gif\")\napp.display()  You must specify the correct path to the image. The image in the example is in the same directory as the program. If the image is in a different directory, specify a relative path, for example if the picture is in a subfolder called  images  you would write:  picture = Picture(app, \"images/test.gif\")  The code looks like this on Windows:   When creating a Picture object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    image  List  -  Yes  The path to the image file you wish to display    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a Picture object"
        },
        {
            "location": "/picture/#methods",
            "text": "You can call the following methods on your Picture object     Method  Takes  Returns  Description      set(image)  image (string)   Sets the picture displayed to the picture located at the path specified in the string  image",
            "title": "Methods"
        },
        {
            "location": "/picture/#examples",
            "text": "Creating a Picture  The simplest way to create a Picture object is as follows:  app = App()\npicture = Picture(app, \"test.gif\")\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/pushbutton/",
            "text": "PushButton\n\n\n(Extends the \nButton\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a button with text or an image, which calls a function when pressed\n\n\nclass guizero.PushButton(master, command, args=None, text=\"Button\", icon=None, pady=10,\npadx=10, grid=None, align=None)\n\n\n\n\nCreate a PushButton object\n\n\nCreate a basic PushButton object like this:\n\n\ndef do_nothing():\n  print(\"Button was pressed\")\n\napp = App()\nbutton = PushButton(app, do_nothing)\napp.display()\n\n\n\n\nThe above code looks like this on Windows:\n\n\n\nWhen creating a PushButton object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\ncommand\n\n\nfunction name\n\n\nNone\n\n\nYes\n\n\nThe name of a function to call when the button is pressed.\n\n\n\n\n\n\nargs\n\n\nList\n\n\nNone\n\n\nNo\n\n\nIf you wish to pass any arguments to the function specified in the command paramter, you can specify them as a list\n\n\n\n\n\n\ntext\n\n\nstring\n\n\n\"Button\"\n\n\nNo\n\n\nThe text to display on the button\n\n\n\n\n\n\nicon\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nThe path to a GIF image file to display on the button. If both an image and text are specified, the image will override the text.\n\n\n\n\n\n\npady\n\n\nint\n\n\n10\n\n\nNo\n\n\nHow much vertical padding to add between the text/icon and the edge of the button.\n\n\n\n\n\n\npadx\n\n\nint\n\n\n10\n\n\nNo\n\n\nHow much horizontal padding to add between the text/icon and the edge of the button.\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your PushButton object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchange_command(newcommand, args)\n\n\nnewcommand (function name), args (List)\n\n\n-\n\n\nSets the function called when the button is pressed to the one specified as \nnewcommand\n. You can optionally specify new \nargs\n as a list.\n\n\n\n\n\n\nset_text(text)\n\n\ntext (string)\n\n\n-\n\n\nSets the text on the button to the string specified in \ntext\n.\n\n\n\n\n\n\npadding(padx, pady)\n\n\npadx (int), pady(int)\n\n\n-\n\n\nSets the amount of x (horizontal) and y (vertical) padding between the text/icon and the edge of the button\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a PushButton\n\n\nThe simplest way to create a PushButton object is as follows:\n\n\ndef do_nothing():\n  print(\"Button was pressed\")\n\napp = App()\nbutton = PushButton(app, do_nothing)\napp.display()",
            "title": "PushButton"
        },
        {
            "location": "/pushbutton/#pushbutton",
            "text": "(Extends the  Button  class from  tkinter )",
            "title": "PushButton"
        },
        {
            "location": "/pushbutton/#purpose",
            "text": "Display a button with text or an image, which calls a function when pressed  class guizero.PushButton(master, command, args=None, text=\"Button\", icon=None, pady=10,\npadx=10, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/pushbutton/#create-a-pushbutton-object",
            "text": "Create a basic PushButton object like this:  def do_nothing():\n  print(\"Button was pressed\")\n\napp = App()\nbutton = PushButton(app, do_nothing)\napp.display()  The above code looks like this on Windows:  When creating a PushButton object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    command  function name  None  Yes  The name of a function to call when the button is pressed.    args  List  None  No  If you wish to pass any arguments to the function specified in the command paramter, you can specify them as a list    text  string  \"Button\"  No  The text to display on the button    icon  string  None  No  The path to a GIF image file to display on the button. If both an image and text are specified, the image will override the text.    pady  int  10  No  How much vertical padding to add between the text/icon and the edge of the button.    padx  int  10  No  How much horizontal padding to add between the text/icon and the edge of the button.    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a PushButton object"
        },
        {
            "location": "/pushbutton/#methods",
            "text": "You can call the following methods on your PushButton object     Method  Takes  Returns  Description      change_command(newcommand, args)  newcommand (function name), args (List)  -  Sets the function called when the button is pressed to the one specified as  newcommand . You can optionally specify new  args  as a list.    set_text(text)  text (string)  -  Sets the text on the button to the string specified in  text .    padding(padx, pady)  padx (int), pady(int)  -  Sets the amount of x (horizontal) and y (vertical) padding between the text/icon and the edge of the button",
            "title": "Methods"
        },
        {
            "location": "/pushbutton/#examples",
            "text": "Creating a PushButton  The simplest way to create a PushButton object is as follows:  def do_nothing():\n  print(\"Button was pressed\")\n\napp = App()\nbutton = PushButton(app, do_nothing)\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/slider/",
            "text": "Slider\n\n\n(Extends the \nScale\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a slider which can be used to specify a value within a range\n\n\nclass guizero.Slider(master, start=0, end=100, orient=HORIZONTAL, command=None, grid=None, align=None)\n\n\n\n\nCreate a Slider object\n\n\nCreate a basic Slider object like this:\n\n\napp = App()\nslider = Slider(app)\napp.display()\n\n\n\n\nThe above code looks like this on Windows:\n\n\n\nWhen creating a Slider object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nTakes\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\nstart\n\n\nint\n\n\n0\n\n\nNo\n\n\nThe smallest value selectable on the slider\n\n\n\n\n\n\nend\n\n\nint\n\n\n100\n\n\nNo\n\n\nThe largest value selectable on the slider\n\n\n\n\n\n\norient\n\n\nHORIZONTAL or VERTICAL\n\n\nHORIZONTAL\n\n\nNo\n\n\nWhether you wish to display your slider horizontally or vertically\n\n\n\n\n\n\ncommand\n\n\nfunction name\n\n\nNone\n\n\nNo\n\n\nThe name of a function to call when the slider value is changed\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your Slider object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_command(command)\n\n\ncommand (function name)\n\n\n-\n\n\nSets the function called when the slider value is changed to the function specified in \ncommand\n\n\n\n\n\n\n\n\nExamples\n\n\nCreating a Slider\n\n\nThe simplest way to create a Slider object is as follows:\n\n\napp = App()\nslider = Slider(app)\napp.display()\n\n\n\n\nCalling a function when the slider value changes\n\n\nYou can specify a function to call when the slider value changes. Your function \nMUST\n have a minimum of one parameter as it will automatically receive a string containing the value of the slider (called \nslider_value\n in the example) when it is called.\n\n\nThis code has a slider and a text box, and the text box updates automatically to display the current value of the slider.\n\n\n\n\ndef slider_changed(slider_value):\n    textbox.set(slider_value)\n\napp = App()\nslider = Slider(app, command=slider_changed)\ntextbox = TextBox(app)\napp.display()",
            "title": "Slider"
        },
        {
            "location": "/slider/#slider",
            "text": "(Extends the  Scale  class from  tkinter )",
            "title": "Slider"
        },
        {
            "location": "/slider/#purpose",
            "text": "Display a slider which can be used to specify a value within a range  class guizero.Slider(master, start=0, end=100, orient=HORIZONTAL, command=None, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/slider/#create-a-slider-object",
            "text": "Create a basic Slider object like this:  app = App()\nslider = Slider(app)\napp.display()  The above code looks like this on Windows:  When creating a Slider object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Takes  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    start  int  0  No  The smallest value selectable on the slider    end  int  100  No  The largest value selectable on the slider    orient  HORIZONTAL or VERTICAL  HORIZONTAL  No  Whether you wish to display your slider horizontally or vertically    command  function name  None  No  The name of a function to call when the slider value is changed    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a Slider object"
        },
        {
            "location": "/slider/#methods",
            "text": "You can call the following methods on your Slider object     Method  Takes  Returns  Description      add_command(command)  command (function name)  -  Sets the function called when the slider value is changed to the function specified in  command",
            "title": "Methods"
        },
        {
            "location": "/slider/#examples",
            "text": "Creating a Slider  The simplest way to create a Slider object is as follows:  app = App()\nslider = Slider(app)\napp.display()  Calling a function when the slider value changes  You can specify a function to call when the slider value changes. Your function  MUST  have a minimum of one parameter as it will automatically receive a string containing the value of the slider (called  slider_value  in the example) when it is called.  This code has a slider and a text box, and the text box updates automatically to display the current value of the slider.   def slider_changed(slider_value):\n    textbox.set(slider_value)\n\napp = App()\nslider = Slider(app, command=slider_changed)\ntextbox = TextBox(app)\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/text/",
            "text": "Text\n\n\n(Extends the \nLabel\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay non editable text in your app, such as for titles, labels and instructions.\n\n\nclass guizero.Text(master, text=\"\", size=12, color=\"black\", font=\"Helvetica\", grid=None, align=None)\n\n\n\n\nCreate a Text object\n\n\nCreate a basic Text object like this:\n\n\napp = App()\ntext = Text(app, \"Hello World\")\napp.display()\n\n\n\n\nWhen creating a Text object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\ntext\n\n\nstring\n\n\n\"\"\n\n\nNo\n\n\nThe text you want to display\n\n\n\n\n\n\nsize\n\n\nint\n\n\n12\n\n\nNo\n\n\nThe font size of the text\n\n\n\n\n\n\ncolor\n\n\nstring\n\n\nblack\n\n\nNo\n\n\nThe colour of the text. Accepts some colour strings (e.g. \nred\n) and colours specified in hex format (e.g. \n#0099ff\n)\n\n\n\n\n\n\nfont\n\n\nstring\n\n\n\"Helvetica\"\n\n\nNo\n\n\nThe font face that the text will be displayed in. Availability of fonts depends on which fonts are installed locally.\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your Text object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappend(text)\n\n\ntext (string)\n\n\n-\n\n\nAdds the provided \ntext\n to the end of the current text within the object\n\n\n\n\n\n\nclear()\n\n\n-\n\n\n-\n\n\nClears the text\n\n\n\n\n\n\ncolor(color)\n\n\ncolor (string)\n\n\n-\n\n\nSets the colour of the text to the \ncolor\n provided. This can be a defined colour (e.g. \"blue\") or a hex format rgb colour (e.g. \"#ff0000\")\n\n\n\n\n\n\nfont_face(font)\n\n\nfont (string)\n\n\n-\n\n\nSets the font face to the \nfont\n provided\n\n\n\n\n\n\nfont_size(size)\n\n\nsize (int)\n\n\n-\n\n\nSets the font size to the \nsize\n provided\n\n\n\n\n\n\nget()\n\n\n-\n\n\nstring\n\n\nReturns a string containing the text from the object\n\n\n\n\n\n\nset(text)\n\n\ntext (string)\n\n\n-\n\n\nSets the text within the object to the \ntext\n provided\n\n\n\n\n\n\n\n\nCall a method like this:\n\n\napp = App()\nwriting = Text(app, text=\"Hello world\", color=\"red\")\n\n# Call the font_size() method\nwriting.font_size(20)   \n\n\n\n\nExamples\n\n\nCreating text\n\n\nThe simplest way to create a text object is as follows:\n\n\napp = App()\nmytext = Text(app, \"Hello world\")\napp.display()",
            "title": "Text"
        },
        {
            "location": "/text/#text",
            "text": "(Extends the  Label  class from  tkinter )",
            "title": "Text"
        },
        {
            "location": "/text/#purpose",
            "text": "Display non editable text in your app, such as for titles, labels and instructions.  class guizero.Text(master, text=\"\", size=12, color=\"black\", font=\"Helvetica\", grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/text/#create-a-text-object",
            "text": "Create a basic Text object like this:  app = App()\ntext = Text(app, \"Hello World\")\napp.display()  When creating a Text object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Data type  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    text  string  \"\"  No  The text you want to display    size  int  12  No  The font size of the text    color  string  black  No  The colour of the text. Accepts some colour strings (e.g.  red ) and colours specified in hex format (e.g.  #0099ff )    font  string  \"Helvetica\"  No  The font face that the text will be displayed in. Availability of fonts depends on which fonts are installed locally.    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a Text object"
        },
        {
            "location": "/text/#methods",
            "text": "You can call the following methods on your Text object     Method  Takes  Returns  Description      append(text)  text (string)  -  Adds the provided  text  to the end of the current text within the object    clear()  -  -  Clears the text    color(color)  color (string)  -  Sets the colour of the text to the  color  provided. This can be a defined colour (e.g. \"blue\") or a hex format rgb colour (e.g. \"#ff0000\")    font_face(font)  font (string)  -  Sets the font face to the  font  provided    font_size(size)  size (int)  -  Sets the font size to the  size  provided    get()  -  string  Returns a string containing the text from the object    set(text)  text (string)  -  Sets the text within the object to the  text  provided     Call a method like this:  app = App()\nwriting = Text(app, text=\"Hello world\", color=\"red\")\n\n# Call the font_size() method\nwriting.font_size(20)",
            "title": "Methods"
        },
        {
            "location": "/text/#examples",
            "text": "Creating text  The simplest way to create a text object is as follows:  app = App()\nmytext = Text(app, \"Hello world\")\napp.display()",
            "title": "Examples"
        },
        {
            "location": "/textbox/",
            "text": "TextBox\n\n\n(Extends the \nEntry\n class from \ntkinter\n)\n\n\nPurpose\n\n\nDisplay a text box which the user can type in\n\n\nclass guizero.TextBox(master, text=\"\", width=10, grid=None, align=None)\n\n\n\n\nCreate a TextBox object\n\n\nCreate a basic TextBox object like this:\n\n\napp = App()\ninput_box = TextBox(app)\napp.display()\n\n\n\n\nWhen creating a Text object, you can specify the following parameters. (More information about how to specify parameters can be found in the \n'How to...'\n section.)\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nCompulsory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nApp or Box\n\n\n-\n\n\nYes\n\n\nThe container to which this widget belongs\n\n\n\n\n\n\ntext\n\n\nstring\n\n\n\"\"\n\n\nNo\n\n\nAny text you wish to be pre-filled in the text box\n\n\n\n\n\n\nwidth\n\n\nint\n\n\n10\n\n\nNo\n\n\nThe width of the text box\n\n\n\n\n\n\ngrid\n\n\nList [int, int]\n\n\nNone\n\n\nNo\n\n\n[x,y]\n coordinates of this widget. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\nalign\n\n\nstring\n\n\nNone\n\n\nNo\n\n\nAlignment of this widget within its grid location. Possible values: \n\"top\"\n, \n\"bottom\"\n, \n\"left\"\n, \n\"right\"\n. This parameter is only required if the \nmaster\n object has a grid layout.\n\n\n\n\n\n\n\n\nMethods\n\n\nYou can call the following methods on your TextBox object\n\n\n\n\n\n\n\n\nMethod\n\n\nTakes\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappend(text)\n\n\ntext (string)\n\n\n-\n\n\nAdds the provided \ntext\n to the end of the current text within the text box\n\n\n\n\n\n\nclear()\n\n\n-\n\n\n-\n\n\nClears the textbox\n\n\n\n\n\n\nget()\n\n\n-\n\n\nstring\n\n\nReturns a string containing current contents of the textbox\n\n\n\n\n\n\nset(text)\n\n\ntext (string)\n\n\n-\n\n\nSets the text within the text box to the \ntext\n provided\n\n\n\n\n\n\n\n\nCall a method like this:\n\n\napp = App()\ninput_box = TextBox(app, \"Type here\")\n\n# Call the clear() method\ninput_box.clear()  \n\n\n\n\nExamples\n\n\nCreating a TextBox\n\n\nThe simplest way to create a TextBox  object is as follows:\n\n\napp = App()\ninput_box = TextBox(app, \"Type here\")\napp.display()",
            "title": "TextBox"
        },
        {
            "location": "/textbox/#textbox",
            "text": "(Extends the  Entry  class from  tkinter )",
            "title": "TextBox"
        },
        {
            "location": "/textbox/#purpose",
            "text": "Display a text box which the user can type in  class guizero.TextBox(master, text=\"\", width=10, grid=None, align=None)",
            "title": "Purpose"
        },
        {
            "location": "/textbox/#create-a-textbox-object",
            "text": "Create a basic TextBox object like this:  app = App()\ninput_box = TextBox(app)\napp.display()  When creating a Text object, you can specify the following parameters. (More information about how to specify parameters can be found in the  'How to...'  section.)     Parameter  Data type  Default  Compulsory  Description      master  App or Box  -  Yes  The container to which this widget belongs    text  string  \"\"  No  Any text you wish to be pre-filled in the text box    width  int  10  No  The width of the text box    grid  List [int, int]  None  No  [x,y]  coordinates of this widget. This parameter is only required if the  master  object has a grid layout.    align  string  None  No  Alignment of this widget within its grid location. Possible values:  \"top\" ,  \"bottom\" ,  \"left\" ,  \"right\" . This parameter is only required if the  master  object has a grid layout.",
            "title": "Create a TextBox object"
        },
        {
            "location": "/textbox/#methods",
            "text": "You can call the following methods on your TextBox object     Method  Takes  Returns  Description      append(text)  text (string)  -  Adds the provided  text  to the end of the current text within the text box    clear()  -  -  Clears the textbox    get()  -  string  Returns a string containing current contents of the textbox    set(text)  text (string)  -  Sets the text within the text box to the  text  provided     Call a method like this:  app = App()\ninput_box = TextBox(app, \"Type here\")\n\n# Call the clear() method\ninput_box.clear()",
            "title": "Methods"
        },
        {
            "location": "/textbox/#examples",
            "text": "Creating a TextBox  The simplest way to create a TextBox  object is as follows:  app = App()\ninput_box = TextBox(app, \"Type here\")\napp.display()",
            "title": "Examples"
        }
    ]
}